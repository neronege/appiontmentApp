@page "/addDoctor"
@using System.Security.Claims
@inject IDoctorService _doctorService
@inject IPoliclinicService _policlinicService
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authStateProvider

@if (Roles == "Admin")
{
    <EditForm Model="doctor" OnValidSubmit="AddDoctors">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="btn btn-group col-6">
            <InputSelect @bind-Value="doctor.PoliclinicId" class="form-select">
                <option value="0" disabled="disabled" selected>
                    Select Policlinic
                </option>
                @foreach (var item in _policlinicService.Policlinics)
                {
                    <option value="@item.Id">@item.PoliclinicName</option>
                }
            </InputSelect>
            <ValidationMessage For="()=>doctor.PoliclinicId"></ValidationMessage>
        </div>
        <div class="mb-3">
            <label for="title">Doctor Name</label>
            <InputText id="text" @bind-Value="doctor.DoctorName" class="form-control"></InputText>
            <ValidationMessage For="()=>doctor.DoctorName"></ValidationMessage>

        </div>
        <div class="mb-3">
            <label for="title">Doctor Title</label>
            <InputText id="text" @bind-Value="doctor.DoctorTitle" class="form-control"></InputText>
            <ValidationMessage For="()=>doctor.DoctorTitle"></ValidationMessage>
            <button type="submit" class="btn btn-primary">Save</button>
        </div>
    </EditForm>
}
else
{
    <head>
        <title>401 Not Authorized</title>
    </head>
    <body>
        <h1>401 Not Authorized</h1>
        <p>Sorry, you are not authorized to access this page.</p>
    </body>
}


@code {

    private DoctorDTO doctor = new DoctorDTO();
    private IEnumerable<Policlinic> _policlinics { get; set; } = new List<Policlinic>();
    string Roles = "";
    private async Task AddDoctors()
    {
        await _doctorService.CreateDoctor(doctor);
        _navigationManager.NavigateTo("");
    }

    protected override async Task OnInitializedAsync()
    {
        string role = (await _authStateProvider.GetAuthenticationStateAsync()).User.Claims.
            FirstOrDefault(x => x.Type == ClaimTypes.Role).Value;


        Roles = role;
    }
    public void Dispose()
    {
        _doctorService.doctorChanged -= StateHasChanged;
    }
}
