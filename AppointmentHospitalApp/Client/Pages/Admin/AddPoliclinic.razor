@page "/addPoliclinic"
@inject IDoctorService _doctorService
@inject IPoliclinicService _policlinicService
@inject NavigationManager _navigationManager
@implements IDisposable

<EditForm Model="policlinic" OnValidSubmit="AddPoliclinics">
    <DataAnnotationsValidator></DataAnnotationsValidator>
  
    <div class="mb-3">
        <label for="policlinicName">Policlinic Name</label>
        <InputText id="text" @bind-Value="policlinic.PoliclinicName" class="form-control"></InputText>
        <ValidationMessage For="@(()=>policlinic.PoliclinicName)"></ValidationMessage>

    </div>
    <button type="submit" class="btn btn-primary">Kaydet</button>
</EditForm>


<br />
<br />
<br />
<br />


@foreach(var item in _policlinics)
            {
                <div class="container">
                    <div class="table-bordered">
                        <h4>@item.PoliclinicName</h4>
                    </div>
                </div>
                <button class="btn btn-warning" @onclick="async ()=>{await _policlinicService.DeletePoliclinics(item.Id);await OnInitializedAsync();}">Sil</button>
            }


@code
 {
    private Policlinic policlinic = new Policlinic();
    private IEnumerable<Policlinic> _policlinics { get; set; } = new List<Policlinic>();

    private async Task AddPoliclinics()
    {
        await _policlinicService.CreatePoliclinics(policlinic);
        _navigationManager.NavigateTo("");
        await _policlinicService.GetPoliclinics();
    }

    protected override async Task OnInitializedAsync()
    {
        _policlinics = await _policlinicService.GetPoliclinics();
        _policlinicService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        _policlinicService.OnChange -= StateHasChanged;
    }

}
