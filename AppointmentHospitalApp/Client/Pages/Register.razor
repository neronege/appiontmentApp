@page "/register"
@using AppointmentHospitalApp.Client.Service.ForAuth;
@using AppointmentHospitalApp.Shared.Model;
@inject IAuthService _authService; 
@inject NavigationManager _navigationManager

<PageTitle>Register</PageTitle>
<EditForm Model=" user" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="user.Email" class="form-control" ></InputText>
        <ValidationMessage For="@(()=>user.Email)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="user.Password" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() =>user.Password)"></ValidationMessage>
    </div>
    <div class="mb-3">
        <label for="confirmpassword">Confirm Password</label>
        <InputText id="confirmpassword" @bind-Value="user.ConfirmPassword" class="form-control" type="password"></InputText>
        <ValidationMessage For="@(() =>user.ConfirmPassword)"></ValidationMessage>
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
    <ValidationSummary></ValidationSummary>
    <div class="@messageCssClass">
        <span>@message</span>
    </div>
</EditForm>   



@code {

    UserRegister user = new UserRegister();

    string message = string.Empty;
    string messageCssClass = string.Empty;
    private async Task HandleRegistration()
    {
        var result = await _authService.Register(user);


        if(result.Success ==true)
        {
            messageCssClass = "text-succes";
            _navigationManager.NavigateTo("/login");
        }
        else
        {
            result.Message = "Kullanıcı daha önce oluşturulmuştur.";
            message = result.Message;
            messageCssClass = "text-danger";
        }
    }


}
